// ERPv2 Prisma Schema
// Complete data model based on CONTEXT.md specifications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  crmNotesCreated   CrmNote[]        @relation("CreatedBy")
  debtAdjustments   DebtAdjustment[] @relation("CreatedBy")
  photosUploaded    IntakePhoto[]    @relation("UploadedBy")

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  SALES
  ACCOUNTING
  READ_ONLY
}

// Product Catalog
enum UnitOfMeasure {
  g
  oz
  lb
  ml
  each
}

enum PackageType {
  bulk
  each
}

model Package {
  id   String      @id @default(cuid())
  type PackageType
  size Float
  unit UnitOfMeasure
  products Product[]
}

model ServingSize {
  id  String       @id @default(cuid())
  qty Float
  uom UnitOfMeasure
  products Product[]
}

enum VarietyType {
  Hemp
  Indica
  Sativa
  Hybrid
  Ruderalis
}

model Variety {
  id       String      @id @default(cuid())
  name     String
  type     VarietyType
  products      Product[]
  b2bItems      B2BSaleItem[]
  inventoryLots InventoryLot[]

  @@unique([name, type])
}

model ProductCategory {
  id        String   @id @default(cuid())
  name      String
  parentId  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent    ProductCategory? @relation("CategoryParent", fields: [parentId], references: [id])
  children  ProductCategory[] @relation("CategoryParent")
  products  Product[]

  @@unique([name])
  @@map("product_categories")
}

model Product {
  id           String  @id @default(cuid())
  name         String
  sku          String  @unique
  category     String
  unit         String  @default("piece")
  // New normalized fields (optional for back-compat)
  uom          UnitOfMeasure?
  packageId    String?
  servingId    String?
  varietyId    String?
  defaultPrice Int
  location     String?
  isActive     Boolean @default(true)
  retailName  String?
  standardStrainName String?
  customerFacingName String?
  categoryRefId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  package           Package?     @relation(fields: [packageId], references: [id])
  serving           ServingSize? @relation(fields: [servingId], references: [id])
  variety           Variety?     @relation(fields: [varietyId], references: [id])
  categoryRef       ProductCategory? @relation(fields: [categoryRefId], references: [id])
  batches           Batch[]
  orderItems        OrderItem[]
  salesQuoteItems   SalesQuoteItem[]
  priceBookEntries  PriceBookEntry[]
  sampleTransactions SampleTransaction[]
  photos            IntakePhoto[]
  b2bItems          B2BSaleItem[]
  purchaseOrderItems PurchaseOrderItem[]
  reservations      Reservation[]

  @@map("products")
}

// Vendor Management
model Vendor {
  id          String @id @default(cuid())
  vendorCode  String @unique
  companyName String
  contactInfo Json
  // CRM fields (optional)
  licenseNumber String?
  contactEmail  String?
  contactPhone  String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  postalCode    String?
  notes         String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  batches            Batch[]
  accountsPayable    AccountsPayable[]
  crmNotes           CrmNote[]
  sampleTransactions SampleTransaction[]
  purchaseOrders     PurchaseOrder[]

  @@map("vendors")
}

// Customer Management
model Customer {
  id           String @id @default(cuid())
  companyName  String
  contactInfo  Json
  // CRM fields (optional)
  licenseNumber String?
  contactEmail  String?
  contactPhone  String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  postalCode    String?
  notes         String?
  creditLimit  Int?
  paymentTerms String?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders              Order[]
  salesQuotes         SalesQuote[]
  accountsReceivable  AccountsReceivable[]
  payments            Payment[]
  crmNotes            CrmNote[]
  priceBooks          PriceBook[]
  debtAdjustments     DebtAdjustment[]
  sampleTransactions  SampleTransaction[]
  customerCredits     CustomerCredit[]
  reminders           Reminder[]
  reservations        Reservation[]

  @@map("customers")
}

// Inventory Management
model Batch {
  id               String    @id @default(cuid())
  productId        String
  vendorId         String
  lotNumber        String
  receivedDate     DateTime
  expirationDate   DateTime?
  quantityReceived Int
  quantityAvailable Int
  isConsignment    Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  product            Product             @relation(fields: [productId], references: [id])
  vendor             Vendor              @relation(fields: [vendorId], references: [id])
  batchCosts         BatchCost[]
  inventoryLot       InventoryLot?
  orderItems         OrderItem[]
  sampleTransactions SampleTransaction[]
  photos             IntakePhoto[]
  reservations       Reservation[]

  @@index([productId])
  @@map("batches")
}

model BatchCost {
  id            String   @id @default(cuid())
  batchId       String
  effectiveFrom DateTime
  unitCost      Int      // Cost in cents
  createdAt     DateTime @default(now())

  // Relations
  batch Batch @relation(fields: [batchId], references: [id])

  @@unique([batchId, effectiveFrom])
  @@map("batch_costs")
}

model InventoryLot {
  id                String   @id @default(cuid())
  batchId           String   @unique
  quantityOnHand    Int
  quantityAllocated Int
  quantityAvailable Int
  lastMovementDate  DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // Optional link to variety for analytics
  varietyId         String?

  // Relations
  batch     Batch   @relation(fields: [batchId], references: [id])
  variety   Variety? @relation(fields: [varietyId], references: [id])
  b2bItems  B2BSaleItem[]

  @@index([quantityAvailable])
  @@index([lastMovementDate])
  @@map("inventory_lots")
}

// Reservations
model Reservation {
  id         String   @id @default(cuid())
  customerId String
  productId  String
  batchId    String?
  qty        Int
  expiresAt  DateTime
  releasedAt DateTime?
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
  batch    Batch?   @relation(fields: [batchId], references: [id])

  @@index([expiresAt])
  @@map("reservations")
}

// Sales Management
model Order {
  id             String      @id @default(cuid())
  customerId     String
  orderDate      DateTime
  allocationDate DateTime?
  status         OrderStatus @default(DRAFT)
  totalAmount    Int         // Total in cents
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  customer           Customer             @relation(fields: [customerId], references: [id])
  orderItems         OrderItem[]
  accountsReceivable AccountsReceivable[]

  @@map("orders")
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  ALLOCATED
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id             String    @id @default(cuid())
  orderId        String
  productId      String
  batchId        String?
  quantity       Int
  unitPrice      Int       // Price in cents
  allocationDate DateTime?
  // COGS snapshot at allocation time
  cogsUnitCents  Int?
  cogsTotalCents Int?
  createdAt      DateTime  @default(now())

  // Relations
  order   Order    @relation(fields: [orderId], references: [id])
  product Product  @relation(fields: [productId], references: [id])
  batch   Batch?   @relation(fields: [batchId], references: [id])

  @@map("order_items")
}

// Financial Management
model AccountsReceivable {
  id               String   @id @default(cuid())
  customerId       String
  orderId          String?
  invoiceNumber    String   @unique
  invoiceDate      DateTime
  dueDate          DateTime
  terms            String?
  amount           Int      // Amount in cents
  balanceRemaining Int      // Remaining balance in cents
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  customer           Customer             @relation(fields: [customerId], references: [id])
  order              Order?               @relation(fields: [orderId], references: [id])
  paymentApplications PaymentApplication[]

  @@index([customerId])
  @@index([balanceRemaining])
  @@index([invoiceDate])
  @@map("accounts_receivable")
}

model Payment {
  id              String   @id @default(cuid())
  customerId      String
  paymentDate     DateTime
  amount          Int      // Amount in cents
  paymentMethod   String
  referenceNumber String?
  createdAt       DateTime @default(now())

  // Relations
  customer            Customer             @relation(fields: [customerId], references: [id])
  paymentApplications PaymentApplication[]

  @@map("payments")
}

model PaymentApplication {
  id              String   @id @default(cuid())
  paymentId       String
  arId            String
  appliedAmount   Int      // Amount applied in cents
  applicationDate DateTime
  createdAt       DateTime @default(now())

  // Relations
  payment Payment            @relation(fields: [paymentId], references: [id])
  ar      AccountsReceivable @relation(fields: [arId], references: [id])

  @@map("payment_applications")
}

model AccountsPayable {
  id               String   @id @default(cuid())
  vendorId         String
  invoiceNumber    String
  invoiceDate      DateTime
  dueDate          DateTime
  terms            String?
  amount           Int      // Amount in cents
  balanceRemaining Int      // Remaining balance in cents
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@map("accounts_payable")
}

// CRM
model CrmNote {
  id         String   @id @default(cuid())
  customerId String?
  vendorId   String?
  noteDate   DateTime
  noteType   String
  content    String
  createdBy  String
  createdAt  DateTime @default(now())

  // Relations
  customer Customer? @relation(fields: [customerId], references: [id])
  vendor   Vendor?   @relation(fields: [vendorId], references: [id])
  user     User      @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("crm_notes")
}

model Reminder {
  id         String   @id @default(cuid())
  customerId String
  dueDate    DateTime
  note       String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])

  @@index([dueDate])
  @@map("reminders")
}

// Sales Quotes
model SalesQuote {
  id             String           @id @default(cuid())
  customerId     String
  quoteNumber    String           @unique
  quoteDate      DateTime
  expirationDate DateTime
  status         SalesQuoteStatus @default(DRAFT)
  shareToken     String           @unique
  totalAmount    Int              // Total in cents
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  customer   Customer          @relation(fields: [customerId], references: [id])
  quoteItems SalesQuoteItem[]

  @@map("sales_quotes")
}

enum SalesQuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  EXPIRED
  CANCELLED
}

model SalesQuoteItem {
  id        String @id @default(cuid())
  quoteId   String
  productId String
  quantity  Int
  unitPrice Int    // Price in cents
  lineTotal Int    // Line total in cents
  createdAt DateTime @default(now())

  // Relations
  quote   SalesQuote @relation(fields: [quoteId], references: [id])
  product Product    @relation(fields: [productId], references: [id])

  @@map("sales_quote_items")
}

// Pricing Management
model PriceBook {
  id            String        @id @default(cuid())
  name          String
  type          PriceBookType
  customerId    String?
  roleId        String?
  effectiveDate DateTime
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  customer Customer?        @relation(fields: [customerId], references: [id])
  entries  PriceBookEntry[]

  @@map("price_books")
}

enum PriceBookType {
  GLOBAL
  ROLE
  CUSTOMER
}

model PriceBookEntry {
  id            String   @id @default(cuid())
  priceBookId   String
  productId     String
  unitPrice     Int      // Price in cents
  effectiveDate DateTime
  createdAt     DateTime @default(now())

  // Relations
  priceBook PriceBook @relation(fields: [priceBookId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@index([productId, effectiveDate])
  @@index([priceBookId, effectiveDate])
  @@map("price_book_entries")
}

// Credit Memos
model CreditMemo {
  id        String   @id @default(cuid())
  arId      String
  amount    Int
  reason    String
  createdAt DateTime @default(now())

  ar AccountsReceivable @relation(fields: [arId], references: [id])

  @@map("credit_memos")
}

// Customer Credits
model CustomerCredit {
  id           String   @id @default(cuid())
  customerId   String
  sourcePaymentId String?
  amountCents  Int
  balanceCents Int
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@map("customer_credits")
}

// Debt Adjustments
model DebtAdjustment {
  id             String   @id @default(cuid())
  customerId     String
  adjustmentDate DateTime
  amount         Int      // Amount in cents (can be negative)
  notes          String
  createdBy      String
  createdAt      DateTime @default(now())

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  user     User     @relation("CreatedBy", fields: [createdBy], references: [id])

  @@map("debt_adjustments")
}

// Write-Off / Shrinkage
model WriteOffLedger {
  id        String   @id @default(cuid())
  lotId     String
  qty       Int
  reason    String
  createdAt DateTime @default(now())

  lot InventoryLot @relation(fields: [lotId], references: [id])

  @@map("write_off_ledger")
}

// Sample Management
model SampleTransaction {
  id                 String                  @id @default(cuid())
  productId          String
  batchId            String?
  customerId         String?
  vendorId           String?
  transactionType    SampleTransactionType
  quantity           Int
  unitCostSnapshot   Int                     // Cost snapshot in cents
  transactionDate    DateTime
  notes              String?
  createdAt          DateTime                @default(now())

  // Relations
  product  Product   @relation(fields: [productId], references: [id])
  batch    Batch?    @relation(fields: [batchId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
  vendor   Vendor?   @relation(fields: [vendorId], references: [id])

  @@map("sample_transactions")
}

enum SampleTransactionType {
  VENDOR_IN
  CLIENT_OUT
  CLIENT_RETURN
  VENDOR_RETURN
}

// B2B Sales (non-breaking addition)

enum B2BSaleType {
  outgoing
  incoming
}

enum B2BSaleStatus {
  DRAFT
  COMMITTED
  DEPARTED
  ARRIVED
  ACCEPTED
  REJECTED
}

model B2BSale {
  id        String        @id @default(cuid())
  type      B2BSaleType
  sourceId  String
  targetId  String
  status    B2BSaleStatus @default(DRAFT)
  departAt  DateTime?
  arriveAt  DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  itemList  B2BSaleItem[]
  events    EventLog[]
}

model B2BSaleItem {
  id          String   @id @default(cuid())
  b2bSaleId   String
  inventoryId String?
  productId   String
  varietyId   String?
  unitCount   Float
  unitPrice   Int

  // Relations
  b2bSale   B2BSale      @relation(fields: [b2bSaleId], references: [id])
  inventory InventoryLot? @relation(fields: [inventoryId], references: [id])
  product   Product      @relation(fields: [productId], references: [id])
  variety   Variety?     @relation(fields: [varietyId], references: [id])
}

model EventLog {
  id         String    @id @default(cuid())
  b2bSaleId  String?
  eventType  String
  data       Json?
  createdAt  DateTime   @default(now())

  // Relations
  b2bSale    B2BSale?   @relation(fields: [b2bSaleId], references: [id])

  @@index([b2bSaleId, createdAt])
}

// Document Management
model IntakePhoto {
  id         String @id @default(cuid())
  parentType String // "product", "batch", etc.
  parentId   String
  fileName   String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User     @relation("UploadedBy", fields: [uploadedBy], references: [id])
  product Product? @relation(fields: [parentId], references: [id], map: "intake_photos_product_fkey")
  batch   Batch?   @relation(fields: [parentId], references: [id], map: "intake_photos_batch_fkey")

  @@map("intake_photos")
}

// Override audit log for pricing changes
model OverrideAudit {
  id           String   @id @default(cuid())
  userId       String
  timestamp    DateTime @default(now())
  orderId      String?
  quoteId      String?
  lineItemId   String?
  oldPrice     Int
  newPrice     Int
  reason       String
  overrideType String   // LINE | GLOBAL | ADMIN_FREEFORM

  @@map("override_audit")
}

// Generic attachments
model Attachment {
  id         String   @id @default(cuid())
  entityType String   // 'product' | 'batch' | 'order' | 'invoice' | 'vendor' | 'customer'
  entityId   String
  fileName   String
  filePath   String
  mimeType   String
  fileSize   Int
  archived   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([entityType, entityId])
  @@map("attachments")
}

// System status and posting lock
model SystemStatus {
  id             String   @id @default("singleton")
  postingLocked  Boolean  @default(false)
  lastReason     String?
  updatedAt      DateTime @updatedAt

  @@map("system_status")
}

// Rules engine
model Rule {
  id        String   @id @default(cuid())
  field     String   // InventoryAge | QtyAvailable | ARDays | SalesVolume
  operator  String   // >, <, >=, <=, ==, !=
  value     String
  action    String   // Alert | Flag | CreateTask
  priority  Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("rules")
}

model RuleConflict {
  id        String   @id @default(cuid())
  ruleIds   String
  createdAt DateTime @default(now())

  @@map("rule_conflicts")
}

// Profitability ledger (nightly)
model ProfitabilityLedger {
  id         String   @id @default(cuid())
  batchId    String?
  vendorId   String?
  revenue    Int      @default(0)
  cogs       Int      @default(0)
  opex       Int      @default(0)
  badDebt    Int      @default(0)
  margin     Int      @default(0)
  runDate    DateTime @default(now())

  @@index([runDate])
  @@map("profitability_ledger")
}

// Purchase Orders
model PurchaseOrder {
  id         String   @id @default(cuid())
  vendorId   String
  poNumber   String   @unique
  status     String   @default("OPEN")
  expectedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id])
  items  PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id        String   @id @default(cuid())
  poId      String
  productId String
  quantity  Int
  unitCost  Int

  po      PurchaseOrder @relation(fields: [poId], references: [id])
  product Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}
